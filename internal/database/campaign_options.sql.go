// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: campaign_options.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const createCampaignOptions = `-- name: CreateCampaignOptions :one
INSERT INTO campaign_options (campaign_id, enable_google_analytics, update_profile_form_id, tags, attachments)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, campaign_id, enable_google_analytics, update_profile_form_id, tags, attachments, created_at, updated_at
`

type CreateCampaignOptionsParams struct {
	CampaignID            uuid.UUID
	EnableGoogleAnalytics sql.NullBool
	UpdateProfileFormID   uuid.NullUUID
	Tags                  pqtype.NullRawMessage
	Attachments           pqtype.NullRawMessage
}

func (q *Queries) CreateCampaignOptions(ctx context.Context, arg CreateCampaignOptionsParams) (CampaignOption, error) {
	row := q.db.QueryRowContext(ctx, createCampaignOptions,
		arg.CampaignID,
		arg.EnableGoogleAnalytics,
		arg.UpdateProfileFormID,
		arg.Tags,
		arg.Attachments,
	)
	var i CampaignOption
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.EnableGoogleAnalytics,
		&i.UpdateProfileFormID,
		&i.Tags,
		&i.Attachments,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCampaignOptionsByCampaignID = `-- name: GetCampaignOptionsByCampaignID :many
SELECT id, campaign_id, enable_google_analytics, update_profile_form_id, tags, attachments, created_at, updated_at
FROM campaign_options
WHERE campaign_id = $1
`

func (q *Queries) GetCampaignOptionsByCampaignID(ctx context.Context, campaignID uuid.UUID) ([]CampaignOption, error) {
	rows, err := q.db.QueryContext(ctx, getCampaignOptionsByCampaignID, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CampaignOption
	for rows.Next() {
		var i CampaignOption
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.EnableGoogleAnalytics,
			&i.UpdateProfileFormID,
			&i.Tags,
			&i.Attachments,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
