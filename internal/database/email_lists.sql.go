// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: email_lists.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createEmailList = `-- name: CreateEmailList :one
INSERT INTO email_lists (name, description, owner_id)
VALUES ($1, $2, $3)
RETURNING id, name, description, owner_id, created_at, updated_at
`

type CreateEmailListParams struct {
	Name        string
	Description sql.NullString
	OwnerID     uuid.UUID
}

func (q *Queries) CreateEmailList(ctx context.Context, arg CreateEmailListParams) (EmailList, error) {
	row := q.db.QueryRowContext(ctx, createEmailList, arg.Name, arg.Description, arg.OwnerID)
	var i EmailList
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEmailList = `-- name: DeleteEmailList :exec
DELETE FROM email_lists
WHERE id = $1
`

func (q *Queries) DeleteEmailList(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteEmailList, id)
	return err
}

const getEmailListByID = `-- name: GetEmailListByID :one
SELECT id, name, description, owner_id, created_at, updated_at
FROM email_lists
WHERE id = $1
`

func (q *Queries) GetEmailListByID(ctx context.Context, id uuid.UUID) (EmailList, error) {
	row := q.db.QueryRowContext(ctx, getEmailListByID, id)
	var i EmailList
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEmailListsByOwnerID = `-- name: GetEmailListsByOwnerID :many
SELECT id, name, description, owner_id, created_at, updated_at
FROM email_lists
WHERE owner_id = $1
`

func (q *Queries) GetEmailListsByOwnerID(ctx context.Context, ownerID uuid.UUID) ([]EmailList, error) {
	rows, err := q.db.QueryContext(ctx, getEmailListsByOwnerID, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EmailList
	for rows.Next() {
		var i EmailList
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmailList = `-- name: UpdateEmailList :one
UPDATE email_lists
SET name = $2, description = $3, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, name, description, owner_id, created_at, updated_at
`

type UpdateEmailListParams struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
}

func (q *Queries) UpdateEmailList(ctx context.Context, arg UpdateEmailListParams) (EmailList, error) {
	row := q.db.QueryRowContext(ctx, updateEmailList, arg.ID, arg.Name, arg.Description)
	var i EmailList
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
