// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: campaigns.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createCampaign = `-- name: CreateCampaign :one
INSERT INTO campaigns (user_id, name, subject, body, scheduled_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, name, subject, body, scheduled_at, created_at, updated_at
`

type CreateCampaignParams struct {
	UserID      uuid.UUID
	Name        string
	Subject     string
	Body        string
	ScheduledAt sql.NullTime
}

func (q *Queries) CreateCampaign(ctx context.Context, arg CreateCampaignParams) (Campaign, error) {
	row := q.db.QueryRowContext(ctx, createCampaign,
		arg.UserID,
		arg.Name,
		arg.Subject,
		arg.Body,
		arg.ScheduledAt,
	)
	var i Campaign
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Subject,
		&i.Body,
		&i.ScheduledAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCampaignsByUserID = `-- name: GetCampaignsByUserID :many
SELECT id, user_id, name, subject, body, scheduled_at, created_at, updated_at
FROM campaigns
WHERE user_id = $1
`

func (q *Queries) GetCampaignsByUserID(ctx context.Context, userID uuid.UUID) ([]Campaign, error) {
	rows, err := q.db.QueryContext(ctx, getCampaignsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Campaign
	for rows.Next() {
		var i Campaign
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Subject,
			&i.Body,
			&i.ScheduledAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
