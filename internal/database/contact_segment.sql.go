// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: contact_segment.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addContactToSegment = `-- name: AddContactToSegment :exec
INSERT INTO contact_segments (contact_id, segment_id)
VALUES ($1, $2)
`

type AddContactToSegmentParams struct {
	ContactID uuid.UUID
	SegmentID uuid.UUID
}

func (q *Queries) AddContactToSegment(ctx context.Context, arg AddContactToSegmentParams) error {
	_, err := q.db.ExecContext(ctx, addContactToSegment, arg.ContactID, arg.SegmentID)
	return err
}

const getContactsBySegmentID = `-- name: GetContactsBySegmentID :many
SELECT c.id, c.first_name, c.last_name, c.subscribed, c.blocklisted, c.email, c.whatsapp, c.landline_number, c.last_changed, c.date_added
FROM contacts c
JOIN contact_segments cs ON c.id = cs.contact_id
WHERE cs.segment_id = $1
`

func (q *Queries) GetContactsBySegmentID(ctx context.Context, segmentID uuid.UUID) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, getContactsBySegmentID, segmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Subscribed,
			&i.Blocklisted,
			&i.Email,
			&i.Whatsapp,
			&i.LandlineNumber,
			&i.LastChanged,
			&i.DateAdded,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeContactFromSegment = `-- name: RemoveContactFromSegment :exec
DELETE FROM contact_segments
WHERE contact_id = $1 AND segment_id = $2
`

type RemoveContactFromSegmentParams struct {
	ContactID uuid.UUID
	SegmentID uuid.UUID
}

func (q *Queries) RemoveContactFromSegment(ctx context.Context, arg RemoveContactFromSegmentParams) error {
	_, err := q.db.ExecContext(ctx, removeContactFromSegment, arg.ContactID, arg.SegmentID)
	return err
}
