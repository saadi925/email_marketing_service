// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: notifications.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createNotification = `-- name: CreateNotification :one
INSERT INTO notifications (user_id, message)
VALUES ($1, $2)
RETURNING id, user_id, message, read, created_at
`

type CreateNotificationParams struct {
	UserID  uuid.UUID
	Message string
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRowContext(ctx, createNotification, arg.UserID, arg.Message)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Message,
		&i.Read,
		&i.CreatedAt,
	)
	return i, err
}

const getNotificationsByUserID = `-- name: GetNotificationsByUserID :many
SELECT id, user_id, message, read, created_at
FROM notifications
WHERE user_id = $1
`

func (q *Queries) GetNotificationsByUserID(ctx context.Context, userID uuid.UUID) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getNotificationsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Message,
			&i.Read,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNotificationReadStatus = `-- name: UpdateNotificationReadStatus :exec
UPDATE notifications
SET read = $2
WHERE id = $1
`

type UpdateNotificationReadStatusParams struct {
	ID   int32
	Read sql.NullBool
}

func (q *Queries) UpdateNotificationReadStatus(ctx context.Context, arg UpdateNotificationReadStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateNotificationReadStatus, arg.ID, arg.Read)
	return err
}
