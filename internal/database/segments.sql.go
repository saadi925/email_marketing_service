// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: segments.sql

package database

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/google/uuid"
)

const createSegment = `-- name: CreateSegment :one
INSERT INTO segments (name, description, criteria)
VALUES ($1, $2, $3)
RETURNING id, name, description, criteria, created_at, updated_at
`

type CreateSegmentParams struct {
	Name        string
	Description sql.NullString
	Criteria    json.RawMessage
}

func (q *Queries) CreateSegment(ctx context.Context, arg CreateSegmentParams) (Segment, error) {
	row := q.db.QueryRowContext(ctx, createSegment, arg.Name, arg.Description, arg.Criteria)
	var i Segment
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Criteria,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSegment = `-- name: DeleteSegment :exec
DELETE FROM segments
WHERE id = $1
`

func (q *Queries) DeleteSegment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSegment, id)
	return err
}

const getSegmentByID = `-- name: GetSegmentByID :one
SELECT id, name, description, criteria, created_at, updated_at
FROM segments
WHERE id = $1
`

func (q *Queries) GetSegmentByID(ctx context.Context, id uuid.UUID) (Segment, error) {
	row := q.db.QueryRowContext(ctx, getSegmentByID, id)
	var i Segment
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Criteria,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSegments = `-- name: GetSegments :many
SELECT id, name, description, criteria, created_at, updated_at
FROM segments
`

func (q *Queries) GetSegments(ctx context.Context) ([]Segment, error) {
	rows, err := q.db.QueryContext(ctx, getSegments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Segment
	for rows.Next() {
		var i Segment
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Criteria,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSegment = `-- name: UpdateSegment :one
UPDATE segments
SET name = $2, description = $3, criteria = $4, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, name, description, criteria, created_at, updated_at
`

type UpdateSegmentParams struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	Criteria    json.RawMessage
}

func (q *Queries) UpdateSegment(ctx context.Context, arg UpdateSegmentParams) (Segment, error) {
	row := q.db.QueryRowContext(ctx, updateSegment,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Criteria,
	)
	var i Segment
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Criteria,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
