// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: subscriptions.sql

package database

import (
	"context"
)

const createSubscription = `-- name: CreateSubscription :one
INSERT INTO subscriptions (user_id, email)
VALUES ($1, $2)
RETURNING id, user_id, email, created_at, updated_at
`

type CreateSubscriptionParams struct {
	UserID int32
	Email  string
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, createSubscription, arg.UserID, arg.Email)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSubscriptionsByUserID = `-- name: GetSubscriptionsByUserID :many
SELECT id, user_id, email, created_at, updated_at
FROM subscriptions
WHERE user_id = $1
`

func (q *Queries) GetSubscriptionsByUserID(ctx context.Context, userID int32) ([]Subscription, error) {
	rows, err := q.db.QueryContext(ctx, getSubscriptionsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subscription
	for rows.Next() {
		var i Subscription
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
