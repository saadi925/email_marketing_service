// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (user_id, token, expires_at)
VALUES ($1, $2, $3)
RETURNING id, user_id, token, expires_at, created_at
`

type CreateRefreshTokenParams struct {
	UserID    uuid.UUID
	Token     string
	ExpiresAt time.Time
}

type CreateRefreshTokenRow struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	Token     string
	ExpiresAt time.Time
	CreatedAt sql.NullTime
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (CreateRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken, arg.UserID, arg.Token, arg.ExpiresAt)
	var i CreateRefreshTokenRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password, name,verified)
VALUES ($1, $2, $3,$4)
RETURNING id, email, name, created_at, updated_at, verified
`

type CreateUserParams struct {
	Email    string
	Password string
	Name     string
	Verified bool
}

type CreateUserRow struct {
	ID        uuid.UUID
	Email     string
	Name      string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	Verified  bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.Password,
		arg.Name,
		arg.Verified,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Verified,
	)
	return i, err
}

const deleteEmailVerifyByEmail = `-- name: DeleteEmailVerifyByEmail :exec
DELETE FROM email_verify
WHERE email = $1
`

func (q *Queries) DeleteEmailVerifyByEmail(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, deleteEmailVerifyByEmail, email)
	return err
}

const deleteRefreshToken = `-- name: DeleteRefreshToken :exec
DELETE FROM refresh_tokens
WHERE token = $1
`

func (q *Queries) DeleteRefreshToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deleteRefreshToken, token)
	return err
}

const getRefreshTokenByToken = `-- name: GetRefreshTokenByToken :one
SELECT id, user_id, token, expires_at, created_at
FROM refresh_tokens
WHERE token = $1
`

type GetRefreshTokenByTokenRow struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	Token     string
	ExpiresAt time.Time
	CreatedAt sql.NullTime
}

func (q *Queries) GetRefreshTokenByToken(ctx context.Context, token string) (GetRefreshTokenByTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokenByToken, token)
	var i GetRefreshTokenByTokenRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, name, created_at, updated_at,verified, password
FROM users
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID        uuid.UUID
	Email     string
	Name      string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	Verified  bool
	Password  string
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Verified,
		&i.Password,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET password = $2
WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID       uuid.UUID
	Password string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.ID, arg.Password)
	return err
}

const verifyUserByEmail = `-- name: VerifyUserByEmail :exec
UPDATE users
SET verified = true
WHERE email = $1
`

func (q *Queries) VerifyUserByEmail(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, verifyUserByEmail, email)
	return err
}
