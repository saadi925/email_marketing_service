// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password, name,verified)
VALUES ($1, $2, $3,$4)
RETURNING id, email, name, created_at, updated_at, verified
`

type CreateUserParams struct {
	Email    string
	Password string
	Name     string
	Verified sql.NullBool
}

type CreateUserRow struct {
	ID        int32
	Email     string
	Name      string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	Verified  sql.NullBool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.Password,
		arg.Name,
		arg.Verified,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Verified,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, name, created_at, updated_at,verified
FROM users
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID        int32
	Email     string
	Name      string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	Verified  sql.NullBool
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Verified,
	)
	return i, err
}
