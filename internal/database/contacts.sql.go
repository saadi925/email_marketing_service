// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: contacts.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createContact = `-- name: CreateContact :one
INSERT INTO contacts (first_name, last_name, subscribed, blocklisted, email, whatsapp, landline_number)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, first_name, last_name, subscribed, blocklisted, email, whatsapp, landline_number, last_changed, date_added
`

type CreateContactParams struct {
	FirstName      sql.NullString
	LastName       sql.NullString
	Subscribed     sql.NullBool
	Blocklisted    sql.NullBool
	Email          string
	Whatsapp       sql.NullString
	LandlineNumber sql.NullString
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, createContact,
		arg.FirstName,
		arg.LastName,
		arg.Subscribed,
		arg.Blocklisted,
		arg.Email,
		arg.Whatsapp,
		arg.LandlineNumber,
	)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Subscribed,
		&i.Blocklisted,
		&i.Email,
		&i.Whatsapp,
		&i.LandlineNumber,
		&i.LastChanged,
		&i.DateAdded,
	)
	return i, err
}

const deleteContact = `-- name: DeleteContact :exec
DELETE FROM contacts
WHERE id = $1
`

func (q *Queries) DeleteContact(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteContact, id)
	return err
}

const getContactByID = `-- name: GetContactByID :one
SELECT id, first_name, last_name, subscribed, blocklisted, email, whatsapp, landline_number, last_changed, date_added
FROM contacts
WHERE id = $1
`

func (q *Queries) GetContactByID(ctx context.Context, id uuid.UUID) (Contact, error) {
	row := q.db.QueryRowContext(ctx, getContactByID, id)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Subscribed,
		&i.Blocklisted,
		&i.Email,
		&i.Whatsapp,
		&i.LandlineNumber,
		&i.LastChanged,
		&i.DateAdded,
	)
	return i, err
}

const getContacts = `-- name: GetContacts :many
SELECT id, first_name, last_name, subscribed, blocklisted, email, whatsapp, landline_number, last_changed, date_added
FROM contacts
`

func (q *Queries) GetContacts(ctx context.Context) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, getContacts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Subscribed,
			&i.Blocklisted,
			&i.Email,
			&i.Whatsapp,
			&i.LandlineNumber,
			&i.LastChanged,
			&i.DateAdded,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContact = `-- name: UpdateContact :one
UPDATE contacts
SET first_name = $2, last_name = $3, subscribed = $4, blocklisted = $5, email = $6, whatsapp = $7, landline_number = $8, last_changed = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, first_name, last_name, subscribed, blocklisted, email, whatsapp, landline_number, last_changed, date_added
`

type UpdateContactParams struct {
	ID             uuid.UUID
	FirstName      sql.NullString
	LastName       sql.NullString
	Subscribed     sql.NullBool
	Blocklisted    sql.NullBool
	Email          string
	Whatsapp       sql.NullString
	LandlineNumber sql.NullString
}

func (q *Queries) UpdateContact(ctx context.Context, arg UpdateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, updateContact,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Subscribed,
		arg.Blocklisted,
		arg.Email,
		arg.Whatsapp,
		arg.LandlineNumber,
	)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Subscribed,
		&i.Blocklisted,
		&i.Email,
		&i.Whatsapp,
		&i.LandlineNumber,
		&i.LastChanged,
		&i.DateAdded,
	)
	return i, err
}
