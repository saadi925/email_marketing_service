// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: email_templates.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createEmailTemplate = `-- name: CreateEmailTemplate :one
INSERT INTO email_templates (user_id, template_name, subject_line, preview_text, from_email, from_name, reply_to_email, customize_to_field)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, user_id, template_name, subject_line, preview_text, from_email, from_name, reply_to_email, customize_to_field, created_at, updated_at
`

type CreateEmailTemplateParams struct {
	UserID           uuid.UUID
	TemplateName     string
	SubjectLine      string
	PreviewText      sql.NullString
	FromEmail        string
	FromName         string
	ReplyToEmail     sql.NullString
	CustomizeToField sql.NullBool
}

func (q *Queries) CreateEmailTemplate(ctx context.Context, arg CreateEmailTemplateParams) (EmailTemplate, error) {
	row := q.db.QueryRowContext(ctx, createEmailTemplate,
		arg.UserID,
		arg.TemplateName,
		arg.SubjectLine,
		arg.PreviewText,
		arg.FromEmail,
		arg.FromName,
		arg.ReplyToEmail,
		arg.CustomizeToField,
	)
	var i EmailTemplate
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TemplateName,
		&i.SubjectLine,
		&i.PreviewText,
		&i.FromEmail,
		&i.FromName,
		&i.ReplyToEmail,
		&i.CustomizeToField,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEmailTemplate = `-- name: DeleteEmailTemplate :exec
DELETE FROM email_templates
WHERE id = $1
`

func (q *Queries) DeleteEmailTemplate(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteEmailTemplate, id)
	return err
}

const getEmailTemplateByID = `-- name: GetEmailTemplateByID :one
SELECT id, user_id, template_name, subject_line, preview_text, from_email, from_name, reply_to_email, customize_to_field, created_at, updated_at
FROM email_templates
WHERE id = $1
`

func (q *Queries) GetEmailTemplateByID(ctx context.Context, id uuid.UUID) (EmailTemplate, error) {
	row := q.db.QueryRowContext(ctx, getEmailTemplateByID, id)
	var i EmailTemplate
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TemplateName,
		&i.SubjectLine,
		&i.PreviewText,
		&i.FromEmail,
		&i.FromName,
		&i.ReplyToEmail,
		&i.CustomizeToField,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEmailTemplatesByUserID = `-- name: GetEmailTemplatesByUserID :many
SELECT id, user_id, template_name, subject_line, preview_text, from_email, from_name, reply_to_email, customize_to_field, created_at, updated_at
FROM email_templates
WHERE user_id = $1
`

func (q *Queries) GetEmailTemplatesByUserID(ctx context.Context, userID uuid.UUID) ([]EmailTemplate, error) {
	rows, err := q.db.QueryContext(ctx, getEmailTemplatesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EmailTemplate
	for rows.Next() {
		var i EmailTemplate
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TemplateName,
			&i.SubjectLine,
			&i.PreviewText,
			&i.FromEmail,
			&i.FromName,
			&i.ReplyToEmail,
			&i.CustomizeToField,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmailTemplate = `-- name: UpdateEmailTemplate :exec
UPDATE email_templates
SET template_name = $1, subject_line = $2, preview_text = $3, from_email = $4, from_name = $5, reply_to_email = $6, customize_to_field = $7, updated_at = CURRENT_TIMESTAMP
WHERE id = $8
`

type UpdateEmailTemplateParams struct {
	TemplateName     string
	SubjectLine      string
	PreviewText      sql.NullString
	FromEmail        string
	FromName         string
	ReplyToEmail     sql.NullString
	CustomizeToField sql.NullBool
	ID               uuid.UUID
}

func (q *Queries) UpdateEmailTemplate(ctx context.Context, arg UpdateEmailTemplateParams) error {
	_, err := q.db.ExecContext(ctx, updateEmailTemplate,
		arg.TemplateName,
		arg.SubjectLine,
		arg.PreviewText,
		arg.FromEmail,
		arg.FromName,
		arg.ReplyToEmail,
		arg.CustomizeToField,
		arg.ID,
	)
	return err
}
